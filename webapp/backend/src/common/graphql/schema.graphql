# Schema for event-detail DDB Table
type EventDetail @aws_cognito_user_pools
@aws_iam {
	user_id: String!
	start_date_time: String
	end_date_time: String
	medication: String
	mood: String
	food: String
    notes: String
}

type EventDetailConnection @aws_cognito_user_pools
@aws_iam {
	items: [EventDetail]
	nextToken: String
}

# [input] EventDetailInput
### CreateEventDetail, DeleteEventDetail and UpdateEventDetail use this input type
input EventDetailInput {
	user_id: String!
	start_date_time: String
	end_date_time: String
	medication: String
	mood: String
	food: String
    notes: String
}

input ModelEventDetailConditionInput {
	user_id: ModelStringInput
	start_date_time: String
	end_date_time: String
	medication: String
	mood: String
	food: String
    notes: String
	and: [ModelEventDetailConditionInput]
	or: [ModelEventDetailConditionInput]
	not: ModelEventDetailConditionInput
}

input ModelEventDetailFilterInput {
	event_id: ModelStringInput
	start_date_time: String
	end_date_time: String
	medication: String
	mood: String
	food: String
    notes: String
	and: [ModelEventDetailFilterInput]
	or: [ModelEventDetailFilterInput]
	not: ModelEventDetailFilterInput
}

input ModelStringInput {
	ne: String
	eq: String
	le: String
	lt: String
	ge: String
	gt: String
	contains: String
	notContains: String
	between: [String]
	beginsWith: String
}

# [input] DeleteEventInput
input DeleteEventInput {
    event_id: String
}

input QueryRequest {
    start: String
    end: String
}

type QueryResponse {
	timestamp: [Int]
    heartrate: [Float]
}

# [type] Mutation
type Mutation @aws_cognito_user_pools
@aws_iam {
	createEventDetail(input: EventDetailInput, condition: ModelEventDetailConditionInput): EventDetail
	updateEventDetail(input: EventDetailInput, condition: ModelEventDetailConditionInput): EventDetail
	deleteEventDetail(input: EventDetailInput, condition: ModelEventDetailConditionInput): EventDetail
	publishNewEventDetail(input: EventDetailInput!): EventDetail
	publishEventDetailUpdates(input: EventDetailInput!): EventDetail
}

# [type] Query
type Query @aws_cognito_user_pools
@aws_iam {
    query(input: QueryRequest): QueryResponse

	getEventDetail(eventId: String!): EventDetail
	listEventDetails(filter: ModelEventDetailFilterInput, limit: Int, nextToken: String): EventDetailConnection
	getEventDetailsByUser(userId: String!, limit: Int, nextToken: String): EventDetailConnection
	getEventDetailsByUserAndCreateTime(
		userId: String!,
		startTime: String!,
		endTime: String!,
		limit: Int,
		nextToken: String
	): EventDetailConnection
}

# [type] Subscription
type Subscription @aws_cognito_user_pools
@aws_iam {
	onCreateEventDetail: EventDetail
		@aws_subscribe(mutations: ["createEventDetail","publishNewEventDetail"])
	onUpdateEventDetail: EventDetail
		@aws_subscribe(mutations: ["updateEventDetail","publishEventDetailUpdates"])
	onDeleteEventDetail: EventDetail
		@aws_subscribe(mutations: ["deleteEventDetail"])
}
